/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ebooksharing1;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author indrajit
 */
public class ComplaintUserPage extends javax.swing.JFrame {
    private static int bid;
    private static String username;
    double sum = 0;
    /**
     * Creates new form ComplaintUserPage
     */
    public ComplaintUserPage(int bid, String username) {
        
        this.bid = bid;
        this.username = username;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ComputeBadWords = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DisplayFreq = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        CompText = new javax.swing.JTextArea();
        SubmitComp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ComputeBadWords.setText("Find the # of Bad Words");
        ComputeBadWords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComputeBadWordsActionPerformed(evt);
            }
        });

        jButton1.setText("Close Page");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("The total # of Bad Words is: ");

        DisplayFreq.setText("Total");

        CompText.setColumns(20);
        CompText.setRows(5);
        jScrollPane1.setViewportView(CompText);

        SubmitComp.setText("Complaint");
        SubmitComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitCompActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(ComputeBadWords)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 564, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(145, 145, 145))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DisplayFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(SubmitComp)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComputeBadWords)
                    .addComponent(jButton1))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DisplayFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(SubmitComp)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitCompActionPerformed
        // TODO add your handling code here:
         try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            String sql = "SELECT READING_DURATION FROM READINGHISTORY WHERE USERNAME = ? AND BOOKID = ?";
            PreparedStatement statement1 = conn.prepareStatement(sql);
            statement1.setString(1, username);
            statement1.setInt(2, bid);
            ResultSet rs1 = statement1.executeQuery();
            
            int reading_duration = 0;
            while(rs1.next()){
            reading_duration = rs1.getInt("READING_DURATION");
            }
            String comp_text = CompText.getText();
            
            if(reading_duration>0)
            {
              String sql2 = "INSERT INTO COMPLAINT (USERNAME, BOOKID, COMPLAINT_TEXT) VALUES (?, ?, ?)"; 
              PreparedStatement pst1 = conn.prepareStatement(sql2);
              pst1.setString(1, username);
              pst1.setInt(2, bid);
              pst1.setString(3, comp_text);
              pst1.execute();
              JOptionPane.showMessageDialog(null, "Complaint Submitted");
            }
            
            else {
                if(sum > 0)
                {
                    String sql2 = "INSERT INTO COMPLAINT (USERNAME, BOOKID, COMPLAINT_TEXT) VALUES (?, ?, ?)";
                    PreparedStatement pst1 = conn.prepareStatement(sql2);
                    pst1.setString(1, username);
                    pst1.setInt(2, bid);
                    pst1.setString(3, comp_text);
                    pst1.execute(); 
                    JOptionPane.showMessageDialog(null, "Complaint Submitted");
                }
                else{
                JOptionPane.showMessageDialog(null, "Cannot Complaint if you haven't read the book \n OR \n haven't found any Bad Words");
                }
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ComplaintUserPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_SubmitCompActionPerformed

    private void ComputeBadWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputeBadWordsActionPerformed
        // TODO add your handling code here:
        try {
            DbConnector dbc = new DbConnector();
            Connection conn = dbc.Connects();
            String sql = "SELECT BOOKFILE FROM BOOKINFO WHERE BOOKID = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, bid);
            ResultSet rs = pst.executeQuery();
            
            String str = "";
            while(rs.next()){
             Blob blob = rs.getBlob("BOOKFILE");
                long blobLength = blob.length();
                
                int pos = 1;   // position is 1-based
                int len = 10;
                byte[] bytes = blob.getBytes(pos, len);
                
                InputStream is = blob.getBinaryStream();
                int b = is.read();
                System.out.println(b);
                
                int content;
                while ((content = is.read()) != -1) {
                    // convert to char and display it
                    str += (char) content;
                    //System.out.println(str);
                    
                }
                
            }
            String[] words = str.split(" ");
            double totalWords = words.length;
             
            JFrame frame = new JFrame("Enter the number of bad words");
            String numiter1 = JOptionPane.showInputDialog(frame, "Enter the number of bad words you wish to look for in the book:");
            int numofiter1 = Integer.parseInt(numiter1);
            for(int i= 0; i < numofiter1; i++)
            {
               JFrame frame1 = new JFrame("Enter the bad words");
                String BadWord = JOptionPane.showInputDialog(frame1, "Enter the bad word:");
                double totalBadWords = getTotalBadWords(BadWord, words );
                sum+=totalBadWords;
            }
            String aString = Double.toString(sum);
            DisplayFreq.setText(aString);
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(ComplaintUserPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComplaintUserPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ComputeBadWordsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private int getTotalBadWords(String BadWord, String [] words){
        int sum = 0;
        for(int i=0; i<words.length; i++){
              if(BadWord.equalsIgnoreCase(words[i]))
                  sum+=1;
        }

    return sum;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComplaintUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComplaintUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComplaintUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComplaintUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComplaintUserPage(bid, username).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CompText;
    private javax.swing.JButton ComputeBadWords;
    private javax.swing.JTextField DisplayFreq;
    private javax.swing.JButton SubmitComp;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
